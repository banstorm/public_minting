
<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Deckila Public Minitng</title>
	<script src="nft.config.js"></script>
	<script src="mintScript.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/bignumber.js/8.0.2/bignumber.js" integrity="sha512-XQDG6H87RgMf+aNFwDPCUcFwUf3t9liyqN/2BkJ8KGixupbjPwQHNhypNA972mLIkg4KPo4lkGmqAf3yfDz8hw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js"></script>
    <script charset="utf-8"
            src="https://cdn.ethers.io/scripts/ethers-v4.min.js" type="text/javascript">
    </script>

    <script src="https://cdn.jsdelivr.net/npm/web3-eth-contract@1.9.0/lib/index.min.js"></script>
    <script
    type="text/javascript"
    src="https://cdnjs.cloudflare.com/ajax/libs/d3/5.16.0/d3.min.js"
  ></script>
  <script
    src="https://code.jquery.com/jquery-3.5.1.min.js"
    integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
    crossorigin="anonymous"
  ></script>

</head>

<body>
    <center><h2>MINTING INFO</h2></center>
	
	<p id="blockNubmer">현재 블록: #00000000</p>
	<p id="mintStartBlockNumber">민팅 시작 블록: #00000000</p>
    <p id="limitedCount">데킬라 NFT 총 수량: #00000000</p>
    <p id="current_count">데킬라 NFT 현재 수량: #00000000</p>
	<p id="in_count">인디아 STORE NFT : #0 </p>
    <p id="ti_count">인도네시아 STORE NFT : #0 </p>
    <p id="phy_count">필리핀 STORE NFT : #0 </p>
    <p id="ve_count">베트남 STORE NFT : #0 </p>
	
	<a href="https://testnet.bscscan.com/blocks">현재 블록넘버 확인하기1(BNB SCAN)</a><br>
	
	<hr/>
    <center><h2>MY WALLET</h2></center>
	
    <center><button onclick="connect()">메타마스크 지갑연결</button></center>
	
	<p id="myWallet">지갑주소: 연결되지 않음</p>
	<p id="myKlay">잔액: 연결되지 않음</p>
	<hr/>
    <center><h2>MINT</h2></center>
	
	
    <fieldset>
        <center> <legend>Select Country Store:</legend></center>
       
    
        <div>
          <input type="radio" id="india" name="drone" value="india"
                 checked>
          <label for="india">India</label>
        </div>
    
        <div>
          <input type="radio" id="indonesia" name="drone" value="indonesia">
          <label for="indonesia">Thailand</label>
        </div>
    
        <div>
          <input type="radio" id="philippines" name="drone" value="philippines">
          <label for="philippines">Philippines</label>
        </div>
        <div>
            <input type="radio" id="vietnam" name="drone" value="vietnam">
            <label for="vietnam">Vietnam</label>
          </div>
    </fieldset>
    <p></p>
    <fieldset>
        <center><div class="panel-heading">PLEASE SET STORE NAME (Limit 15)</div></center>
        <center>
            <input type="text" id="store_name" name="store_name" class="form-control" value="NONAME" oninput="handleOnInput(this)" aria-describedby="basic-addon1">	
        </center>

        
    </fieldset>
   
       
    <p></p>
    <center><button onclick="publicMint()">MINTING</button></center>
	
	<hr/>
	<footer style="text-align: center;">Copyright &copy; 2023 <a href="http://www.deckila.com/">Deckila</a> All rights reserved</footer>
	<script>
		document.addEventListener("DOMContentLoaded", async function (event) {

            if(window.ethereum){
                try{
                    await window.ethereum.request({ method : "eth_requestAccounts"});
                    window.web3 = new Web3(window.ethereum);
                    const account = web3.eth.accounts;
                    if (!account) {
				    alert("메타마스크 확장 프로그램을 활성화 해주세요!");
			        }
			        check_status();
                }catch(error) {
                    console.log("error : ",error);
                }
            }
			
		});
	</script>

<script>

let walletAddress;
let mintIndexForSale = 0;
let maxSaleAmount = 0;
let mintPrice = 0;
let mintStartBlockNumber = 0;
let mintLimitPerBlock = 0;

let blockNumber = 0;
let blockCnt = false;
let net_id;
let store_country = 0;

let limitedCount;
let current_count;

let in_count;
let indone_count;
let phy_count;
let ve_count;

function handleOnInput(e)  {
  e.value = e.value.replace(/[^A-Za-z]/ig, '')
  if(e.value.length > 15)  {
    e.value 
      = e.value.substr(0, 15);
  }
}

    async function connect() 
    {
        console.log("connecting...");
        
        if (window.ethereum) {
            await window.ethereum.request({ method: "eth_requestAccounts" });
            window.web3 = new Web3(window.ethereum);
            const account = web3.eth.accounts;
            walletAddress = account.givenProvider.selectedAddress;
            console.log(`Wallet: ${walletAddress}`);
            document.getElementById("myWallet").innerHTML = `지갑주소: ${walletAddress}`
 
           window.web3.eth.getBalance(walletAddress, "latest")
           .then(function(result){
            
               const  bal = (Web3.utils.fromWei(result)*1);
               document.getElementById("myKlay").innerHTML = `잔액: ${bal.toFixed(2)} BNB`
    
           })
           .catch(function(err){
       
               console.log("실패",err);
         
           })
        } 
        else {
            alert("MetaMask is not installed");
        }
        await check_status();
    }

    async function check_status() {
      
        const web3 = new Web3(window.ethereum);
        web3.eth.net.getId()
        .then( netID => {
            
            net_id = netID;

           
        });
        const contract = new web3.eth.Contract(ABI, CONTRACTADDRESS);
       
     
        await contract.methods.getMintInfo().call()
        .then(function (result) {
            console.log(result);
            start_block = parseInt(result[0]);
            limitedCount = parseInt(result[1]);
            current_count = parseInt(result[2]);
            in_count = parseInt(result[3]);
            indone_count = parseInt(result[4]);
            phy_count = parseInt(result[5]);
            ve_count = parseInt(result[6]);

            document.getElementById("limitedCount").innerHTML = `전체 수량: ${limitedCount}개`;
            document.getElementById("current_count").innerHTML = `현재 수량: ${current_count}개`;
        
            document.getElementById("in_count").innerHTML = `인디아 STORE NFT: ${in_count}개`;
            document.getElementById("ti_count").innerHTML = `인도네시아 STORE NFT: ${indone_count}개`;
            document.getElementById("phy_count").innerHTML = `필리핀 STORE NFT: ${phy_count}개`;
            document.getElementById("ve_count").innerHTML = `베트남 STORE NFT: ${ve_count}개`;

            document.getElementById("mintStartBlockNumber").innerHTML = `민팅 시작 블록: #${start_block}`;
          
        })
        .catch(function (error) {
            console.log(error);
        });

        blockNumber = await window.web3.eth.getBlockNumber();
        console.log("현재 블록수 ----",blockNumber);
        document.getElementById("blockNubmer").innerHTML = "현재 블록: #" + blockNumber;
        cntBlockNumber();
    }
    function cntBlockNumber() {
    if(!blockCnt) {
        setInterval(function(){
            blockNumber+=1;
            document.getElementById("blockNubmer").innerHTML = "현재 블록: #" + blockNumber;
        }, 1000);
        blockCnt = true;
    }
}

async function publicMint() {

    let nft_ipfs;
   
    if (net_id === 56) {
        console.log("메인넷");
    } else if (net_id === 97) {
        console.log("테스트넷");
    } else {
        alert("ERROR: You are not connected to Binance Network!");
        return;
    }
    if (!walletAddress) {
        alert("ERROR: Please connect metamask!");
        return;
    }
    let store_name = document.getElementById("store_name").value;
    if(store_name =="" || store_name =="NONAME"){
	    return alert("Please set store name.");
    }
    if(current_count > limitedCount){
        alert("Already solved nft!");
        return;
    }  

    let store_id;
    if(document.getElementById('india').checked) {
        store_country = 1;
    }else if(document.getElementById('indonesia').checked) {
        store_country = 2;
    }else if(document.getElementById('philippines').checked) {
        store_country = 3;
    }else if(document.getElementById('vietnam').checked) {
        store_country = 4;
    }
    const contract = new web3.eth.Contract(ABI, CONTRACTADDRESS);
    await contract.methods.getMintInfo().call()
        .then(function (result) {
          
            in_count = parseInt(result[3]);
            indone_count = parseInt(result[4]);
            phy_count = parseInt(result[5]);
            ve_count = parseInt(result[6]);
        
            document.getElementById("in_count").innerHTML = `인디아 STORE NFT: ${in_count}개`;
            document.getElementById("ti_count").innerHTML = `인도네시아 STORE NFT: ${indone_count}개`;
            document.getElementById("phy_count").innerHTML = `필리핀 STORE NFT: ${phy_count}개`;
            document.getElementById("ve_count").innerHTML = `베트남 STORE NFT: ${ve_count}개`;

            if(store_country === 1){
                nft_ipfs = INDIA_URL;
            }else if(store_country === 2){
                nft_ipfs = INDONESIA_URL;
            }else if(store_country === 3){
                nft_ipfs = PHYLIPIN_URL;
            }else if(store_country === 4){
                nft_ipfs = VETNAM_URL;
            }
          
        })
        .catch(function (error) {
            console.log(error);
            return;
        });


 let blockHash;
 console.log(" IPFS URI ----->","'"+nft_ipfs+"'");
 const ipfs = "'"+nft_ipfs+"'";
 try {
        const gasAmount = await contract.methods.mintDeckilaStore(store_name,
                                                            store_country,
                                                            10,
                                                            nft_ipfs).estimateGas({
            from: walletAddress,
            gas: 6000000
        })
        const result = await contract.methods.mintDeckilaStore(store_name,
                                                            store_country,
                                                            10,
                                                            nft_ipfs).send({
            from: walletAddress,
            gas: gasAmount
        })

        const res_store_id = (result.events.Transfer.returnValues.tokenId*1);
        if (result != null) {
            console.log(result);
            blockHash = result.transactionHash;
        

            $.ajax({
                url:'/mint',
                async: true,
                data: {walletAddress,store_name,res_store_id,store_country,blockHash
                },
                type:'post',
                dataType:'json',
                jsonp:'callback',
                timeout:5000,
                error:function(request, result,error){
                  console.log("db-error :",result);
	              //alert('Minting Failed!');
                },
                success:function(obj){
                  console.log(obj);
                  alert('Minting Success!');
                
                }
            });

    
        }
    } catch (error) {
        console.log(error);
        alert('Minting Failed!');
    }
   
}

</script>

</body>

